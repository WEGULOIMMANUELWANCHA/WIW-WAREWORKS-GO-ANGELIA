name: Build Binaries 

on:
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Bazel
        run: |
          sudo apt update
          sudo apt install -y apt-transport-https curl gnupg
          curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor -o /usr/share/keyrings/bazel-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
          sudo apt update
          sudo apt install -y bazel
          bazel version
        shell: bash

      - name: Run Go script
        run: |
          echo 'package main
          
          import (
            "bufio"
            "fmt"
            "os"
            "os/exec"
            "strings"
          )
          
          func main() {
            file, err := os.Open("github-repositories/repositories.txt")
            if err != nil {
              fmt.Println("Error opening file:", err)
              os.Exit(1)
            }
            defer file.Close()
          
            scanner := bufio.NewScanner(file)
          
            for scanner.Scan() {
              repositoryURL := strings.TrimSpace(scanner.Text())
          
              fmt.Println("Repository URL:", repositoryURL)
          
              cmd := exec.Command("git", "clone", repositoryURL)
              cmd.Stdout = os.Stdout
              cmd.Stderr = os.Stderr
              err := cmd.Run()
              if err != nil {
                fmt.Println("Error cloning repository:", err)
              }
            }
          
            if err := scanner.Err(); err != nil {
              fmt.Println("Error reading file:", err)
              os.Exit(1)
            }
          }' > script.go
          go run script.go
          
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.20.3' # Change the Go version to match the required format
      
      - name: Install buildifier
        run: |
          go install github.com/bazelbuild/buildtools/buildifier@latest
      
      - name: Install Gazelle
        run: |
          go install github.com/bazelbuild/bazel-gazelle/cmd/gazelle@latest
      
      - name: Install Protobuf
        run: |
          go install github.com/bazelbuild/bazelisk@latest
          bazelisk version
          bazelisk run //:gazelle -- update-repos -from_file=go.mod -to_macro=deps.bzl%go_repositories --build_file_proto_mode=disable_glob
          bazelisk run //:gazelle -- update
          bazelisk run //:gazelle

      - name: Format and Fix Workspace file with Buildifier
        run: |
          buildifier --lint=warn --mode=fix WORKSPACE
      
      - name: Format and Fix Starlark files with Gazelle
        run: |
          bazelisk run //:gazelle --lint=warn --fix WORKSPACE
          
      - name: Build Binaries 
        run: |
          while IFS= read -r repo; do
            repo_name=$(basename "$repo" .git)
            cd "$repo_name" || continue
            
            bazel build //...
            
            if [ $? -ne 0 ]; then
              echo "Error building $repo_name"
            fi
            
            cd ..
            rm -rf "$repo_name"
          done < github-repositories/repositories.txt
        shell: bash

      - name: Bazel Test
        run: |
          bazel test //...
          
          if [ $? -ne 0 ]; then
            echo "Bazel test failed"
          fi
        shell: bash

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_dir: ./github-pages/pages.md

      - name: Store Artifacts as Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: ./github-release/artifacts@v1.0.0

